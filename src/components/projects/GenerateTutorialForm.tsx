
"use client";

import { useState } from "react";
import { useForm, type SubmitHandler } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { generateTutorial } from "@/ai/flows/generate-tutorial";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { useToast } from "@/hooks/use-toast";
import type { Project, TutorialStep } from "@/lib/types";
import { Sparkles, Loader2 } from "lucide-react";

const formSchema = z.object({
  prompt: z.string().min(10, {
    message: "Prompt must be at least 10 characters.",
  }),
});

type FormValues = z.infer<typeof formSchema>;

interface GenerateTutorialFormProps {
  addProject: (project: Project) => void;
}

const parseTutorialText = (text: string, prompt: string): Project => {
  // Split the text into lines
  const lines = text.split('\n');
  
  // Find the first H1 for the title
  const titleLine = lines.find(line => line.startsWith('# ')) || '';
  const title = titleLine.replace('#', '').trim() || prompt;

  // Split the rest of the content by H2 headings to get steps
  const contentWithoutTitle = text.substring(text.indexOf(titleLine) + titleLine.length).trim();
  const stepParts = contentWithoutTitle.split(/\n(?=##\s)/);

  // The first part before any "##" is the description
  const firstPart = stepParts.shift() || '';
  const description = firstPart.startsWith('## ') ? '' : firstPart.trim();
  if (description === '') {
    stepParts.unshift(firstPart); // It was a step, so add it back
  }
  
  const steps: TutorialStep[] = stepParts
    .filter(part => part.trim().startsWith('## '))
    .map((part, index) => {
      const stepLines = part.trim().split('\n');
      const stepTitle = stepLines[0].replace('##', '').trim();
      const stepContent = stepLines.slice(1).join('\n').trim();
      
      return {
        id: `step-${index + 1}`,
        title: stepTitle,
        content: stepContent,
        completed: false,
      };
  });

  return {
    id: `${title.toLowerCase().replace(/[^a-z0-9]+/g, '-')}-${Date.now()}`,
    title,
    description: description || "A new project generated by AI.",
    image: `https://placehold.co/600x400.png`,
    dataAiHint: title.split(' ').slice(0, 2).join(' ').toLowerCase(),
    steps,
  };
};

export function GenerateTutorialForm({ addProject }: GenerateTutorialFormProps) {
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();
  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: { prompt: "" },
  });

  const onSubmit: SubmitHandler<FormValues> = async (data) => {
    setIsLoading(true);
    try {
      const result = await generateTutorial({ prompt: data.prompt });
      const newProject = parseTutorialText(result.tutorial, data.prompt);
      addProject(newProject);
      toast({
        title: "Tutorial Generated!",
        description: `Project "${newProject.title}" has been added.`,
      });
      form.reset();
    } catch (error) {
      console.error("Failed to generate tutorial:", error);
      toast({
        variant: "destructive",
        title: "Oh no! Something went wrong.",
        description: "There was a problem generating the tutorial. Please try again.",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card className="max-w-3xl mx-auto">
      <CardHeader>
        <CardTitle className="font-headline text-2xl flex items-center">
          <Sparkles className="mr-2 h-6 w-6 text-primary" />
          Generate a New Project Tutorial
        </CardTitle>
        <CardDescription>
          Describe the project you want to build, and our AI will create a step-by-step guide for you.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <FormField
              control={form.control}
              name="prompt"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Project Idea</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder="e.g., 'A blog built with Next.js and MDX', 'A real-time chat application using Firebase'"
                      className="resize-none"
                      rows={4}
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit" disabled={isLoading} className="w-full sm:w-auto">
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Generating...
                </>
              ) : (
                "Forge Project"
              )}
            </Button>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
}
