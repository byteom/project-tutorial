
"use client";

import { useState } from "react";
import { useForm, type SubmitHandler } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { generateTutorial, type GenerateTutorialOutput } from "@/ai/flows/generate-tutorial";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { useToast } from "@/hooks/use-toast";
import type { Project } from "@/lib/types";
import { Sparkles, Loader2 } from "lucide-react";

const formSchema = z.object({
  prompt: z.string().min(10, {
    message: "Prompt must be at least 10 characters.",
  }),
});

type FormValues = z.infer<typeof formSchema>;

interface GenerateTutorialFormProps {
  addProject: (project: Project) => void;
}

const parseTutorial = (output: GenerateTutorialOutput, prompt: string): Project => {
  const { title, description, steps, tags } = output;

  return {
    id: `${title.toLowerCase().replace(/[^a-z0-9]+/g, '-')}-${Date.now()}`,
    title: title || prompt,
    description: description || "A new project generated by AI.",
    image: `https://placehold.co/600x400.png`,
    dataAiHint: title.split(' ').slice(0, 2).join(' ').toLowerCase(),
    tags: tags || [],
    steps: steps.map(step => ({
        ...step,
        completed: false,
        subTasks: step.subTasks.map(subTask => ({ ...subTask, completed: false, content: '' }))
    })),
  };
};

export function GenerateTutorialForm({ addProject }: GenerateTutorialFormProps) {
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();
  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: { prompt: "" },
  });

  const onSubmit: SubmitHandler<FormValues> = async (data) => {
    setIsLoading(true);
    try {
      const result = await generateTutorial({ prompt: data.prompt });
      const newProject = parseTutorial(result, data.prompt);
      addProject(newProject);
      toast({
        title: "Tutorial Generated!",
        description: `Project "${newProject.title}" has been added.`,
      });
      form.reset();
    } catch (error) {
      console.error("Failed to generate tutorial:", error);
      toast({
        variant: "destructive",
        title: "Oh no! Something went wrong.",
        description: "There was a problem generating the tutorial. Please try again.",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card className="max-w-3xl mx-auto">
      <CardHeader>
        <CardTitle className="font-headline text-2xl flex items-center">
          <Sparkles className="mr-2 h-6 w-6 text-primary" />
          Generate a New Project Tutorial
        </CardTitle>
        <CardDescription>
          Describe the project you want to build, and our AI will create a step-by-step guide for you.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <FormField
              control={form.control}
              name="prompt"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Project Idea</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder="e.g., 'A blog built with Next.js and MDX', 'A real-time chat application using Firebase'"
                      className="resize-none"
                      rows={4}
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit" disabled={isLoading} className="w-full sm:w-auto">
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Generating...
                </>
              ) : (
                "Forge Project"
              )}
            </Button>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
}
