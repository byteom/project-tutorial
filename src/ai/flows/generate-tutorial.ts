// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview A tutorial generator AI agent.
 *
 * - generateTutorial - A function that handles the tutorial generation process.
 * - GenerateTutorialInput - The input type for the generateTutorial function.
 * - GenerateTutorialOutput - The return type for the generateTutorial function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateTutorialInputSchema = z.object({
  prompt: z.string().describe('The prompt to generate a tutorial from.'),
});
export type GenerateTutorialInput = z.infer<typeof GenerateTutorialInputSchema>;

const SubTaskSchema = z.object({
    id: z.string().describe("A unique ID for the sub-task (e.g., 'subtask-1')."),
    title: z.string().describe('The title of the sub-task.'),
});

const TutorialStepSchema = z.object({
    id: z.string().describe("A unique ID for the step (e.g., 'step-1')."),
    title: z.string().describe('The title of the tutorial step.'),
    description: z.string().describe('A short, one-paragraph description of what this step covers.'),
    content: z.string().describe('The detailed, well-structured Markdown content for the entire step. All code snippets must be in fenced code blocks with language identifiers.'),
    subTasks: z.array(SubTaskSchema).describe('A list of specific, actionable sub-tasks for this step.'),
});

const GenerateTutorialOutputSchema = z.object({
  title: z.string().describe('The main title of the overall tutorial.'),
  description: z.string().describe('A short, one-paragraph description of the entire project.'),
  steps: z.array(TutorialStepSchema).describe('An array of tutorial steps.'),
  progress: z.string().describe('A short summary of the generated tutorial.')
});
export type GenerateTutorialOutput = z.infer<typeof GenerateTutorialOutputSchema>;

export async function generateTutorial(input: GenerateTutorialInput): Promise<GenerateTutorialOutput> {
  return generateTutorialFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateTutorialPrompt',
  input: {schema: GenerateTutorialInputSchema},
  output: {schema: GenerateTutorialOutputSchema},
  prompt: `You are an expert tutorial generator. You will generate a tutorial from the given prompt.
The tutorial should be well-structured and use Markdown for formatting.

Your response must follow these rules:
1.  Generate a main title and a short, one-paragraph description for the entire project.
2.  Break the tutorial down into a series of distinct steps.
3.  For each step, provide a title, a short description, and a list of specific, actionable sub-tasks.
4.  The 'content' for each step must contain all the detailed explanations and code for that step.
5.  All code snippets in the 'content' field must be enclosed in fenced code blocks with the appropriate language identifier (e.g., \`\`\`javascript or \`\`\`bash). Do not include the filename inside the code block fence.

Prompt: {{{prompt}}}`,
});

const generateTutorialFlow = ai.defineFlow(
  {
    name: 'generateTutorialFlow',
    inputSchema: GenerateTutorialInputSchema,
    outputSchema: GenerateTutorialOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return {
      ...output!,
      progress: 'Generated a tutorial from the given prompt.'
    };
  }
);
