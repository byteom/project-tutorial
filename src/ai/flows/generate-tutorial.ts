
// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview A tutorial generator AI agent.
 *
 * - generateTutorial - A function that handles the tutorial generation process.
 * - GenerateTutorialInput - The input type for the generateTutorial function.
 * - GenerateTutorialOutput - The return type for the generateTutorial function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateTutorialInputSchema = z.object({
  prompt: z.string().describe('The prompt to generate a tutorial from.'),
});
export type GenerateTutorialInput = z.infer<typeof GenerateTutorialInputSchema>;

const SubTaskSchema = z.object({
    id: z.string().describe("A unique ID for the sub-task (e.g., 'subtask-1-1')."),
    title: z.string().describe('The title of the sub-task.'),
    description: z.string().describe('A short, one-sentence description of what this sub-task covers.'),
});

const TutorialStepSchema = z.object({
    id: z.string().describe("A unique ID for the step (e.g., 'step-1-setup')."),
    title: z.string().describe('The title of the tutorial step.'),
    description: z.string().describe('A short, one-paragraph description of what this step covers.'),
    subTasks: z.array(SubTaskSchema).describe('A list of specific, actionable sub-tasks for this step.'),
});

const GenerateTutorialOutputSchema = z.object({
  title: z.string().describe('The main title of the overall tutorial.'),
  description: z.string().describe('A short, one-paragraph description of the entire project.'),
  steps: z.array(TutorialStepSchema).describe('An array of tutorial steps.'),
  tags: z.array(z.string()).describe("A list of relevant tags for the project, such as programming language (e.g., 'C++'), frameworks (e.g., 'React'), and difficulty level ('Easy', 'Medium', 'Hard')."),
  progress: z.string().describe('A short summary of the generated tutorial.')
});
export type GenerateTutorialOutput = z.infer<typeof GenerateTutorialOutputSchema>;

export async function generateTutorial(input: GenerateTutorialInput): Promise<GenerateTutorialOutput> {
  return generateTutorialFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateTutorialPrompt',
  input: {schema: GenerateTutorialInputSchema},
  output: {schema: GenerateTutorialOutputSchema},
  prompt: `You are an expert tutorial generator specializing in creating detailed, project-based learning guides for software developers. Your output should be structured, clear, and follow best practices for technical instruction.

Your response must follow these rules:
1.  **Main Title and Description:** Generate a concise, descriptive main title and a one-paragraph summary for the entire project.
2.  **High-Level Steps:** Break the tutorial into a series of logical, high-level steps (e.g., 'Project Setup', 'API Integration', 'UI Implementation'). Each step must have a title and a one-paragraph description.
3.  **Granular Sub-Tasks:** For each step, create a list of specific, actionable sub-tasks. Each sub-task MUST have a unique ID, a descriptive title, and a single, informative sentence describing its purpose. The sub-task titles should be imperative (e.g., 'Create the Main Component', 'Implement the API Call').
4.  **Tags:** Generate a list of relevant tags for the project. Include the primary programming language, any frameworks or major libraries, and a difficulty rating (Easy, Medium, or Hard).

**CRITICAL:** Do NOT generate the actual implementation code or detailed markdown content in this step. You are only creating the tutorial's high-level structure and outline.

Prompt: {{{prompt}}}`,
});

const generateTutorialFlow = ai.defineFlow(
  {
    name: 'generateTutorialFlow',
    inputSchema: GenerateTutorialInputSchema,
    outputSchema: GenerateTutorialOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return {
      ...output!,
      progress: 'Generated a tutorial from the given prompt.'
    };
  }
);
